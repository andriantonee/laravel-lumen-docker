#!/bin/sh
set -e

NETWORK_NAME=api-network

SITEAPP_NAME=api-siteapp
WEBSERVER_NAME=api-webserver

OLD_SITEAPP_EXISTS=false

SITEAPP_CONTAINER_NAME=${SITEAPP_NAME}-container
OLD_SITEAPP_CONTAINER_NAME=old-${SITEAPP_CONTAINER_NAME}
WEBSERVER_CONTAINER_NAME=${WEBSERVER_NAME}-container

# ----- network -----

if [ ! "$(docker network ls -q --filter name=^${NETWORK_NAME}$)" ]; then
    echo "creating network $NETWORK_NAME..."
    docker network create $NETWORK_NAME \
        --attachable
fi

# https://github.com/moby/moby/issues/20155 (Docker networks: expected behaviour when 2 containers have the same --net-alias)
# ----- siteapp -----

echo "building $SITEAPP_NAME image..."
docker build --tag $SITEAPP_NAME --target build ./site-app

echo "checking $SITEAPP_CONTAINER_NAME..."
if [ "$(docker ps -aq -f name=^/${SITEAPP_CONTAINER_NAME}$)" ]; then
    OLD_SITEAPP_EXISTS=true

    if [ "$(docker ps -aq -f status=exited -f name=^/${SITEAPP_CONTAINER_NAME}$)" ]; then
        echo "removing $SITEAPP_CONTAINER_NAME status=exited"
        docker rm $SITEAPP_CONTAINER_NAME

        OLD_SITEAPP_EXISTS=false
    fi
fi

if [ "$OLD_SITEAPP_EXISTS" = true ]; then
    echo "checking $OLD_SITEAPP_CONTAINER_NAME..."
    if [ "$(docker ps -aq -f name=^/${OLD_SITEAPP_CONTAINER_NAME}$)" ]; then
        echo "stopping $OLD_SITEAPP_CONTAINER_NAME..."
        docker stop $OLD_SITEAPP_CONTAINER_NAME

        echo "removing $OLD_SITEAPP_CONTAINER_NAME..."
        docker rm $OLD_SITEAPP_CONTAINER_NAME
    fi

    echo "renaming $SITEAPP_CONTAINER_NAME to $OLD_SITEAPP_CONTAINER_NAME"
    docker rename $SITEAPP_CONTAINER_NAME $OLD_SITEAPP_CONTAINER_NAME
fi

echo "creating $SITEAPP_CONTAINER_NAME..."
docker run --detach \
    --name $SITEAPP_CONTAINER_NAME \
    --log-driver json-file \
    --log-opt max-size=10m \
    --log-opt max-file=30 \
    --network $NETWORK_NAME \
    --network-alias siteapp \
    --restart always \
    --env APP_NAME \
    --env APP_ENV \
    --env APP_KEY \
    --env APP_DEBUG \
    --env "APP_URL=http://localhost" \
    --env "APP_TIMEZONE=UTC" \
    --env "APP_LOCALE=id" \
    --env "LOG_CHANNEL=stderr" \
    --env DB_CONNECTION \
    --env DB_HOST \
    --env DB_PORT \
    --env DB_DATABASE \
    --env DB_USERNAME \
    --env DB_PASSWORD \
    --env "CACHE_DRIVER=file" \
    --env "QUEUE_CONNECTION=sync" \
    $SITEAPP_NAME

# ----- webserver -----

echo "building $WEBSERVER_NAME image..."
docker build --tag $WEBSERVER_NAME --target base .

echo "checking $WEBSERVER_CONTAINER_NAME..."
if [ "$(docker ps -aq -f status=exited -f name=^/${WEBSERVER_CONTAINER_NAME}$)" ]; then
    echo "removing $WEBSERVER_CONTAINER_NAME status=exited"
    docker rm $WEBSERVER_CONTAINER_NAME
fi

if [ ! "$(docker ps -aq -f name=^/${WEBSERVER_CONTAINER_NAME}$)" ]; then
    echo "creating $WEBSERVER_CONTAINER_NAME..."
    docker run --detach \
        --name $WEBSERVER_CONTAINER_NAME \
        --log-driver json-file \
        --log-opt max-size=10m \
        --log-opt max-file=30 \
        --network $NETWORK_NAME \
        --network-alias webserver \
        --restart always \
        --publish 80:80 \
        --volume $(pwd)/site-app/public:/var/www/site-app/public \
        --volume $(pwd)/conf.d:/etc/nginx/conf.d \
        $WEBSERVER_NAME
fi

# ----- old siteapp -----

if [ "$OLD_SITEAPP_EXISTS" = true ]; then
    echo "disconnecting $OLD_SITEAPP_CONTAINER_NAME from $NETWORK_NAME..."
    docker network disconnect $NETWORK_NAME $OLD_SITEAPP_CONTAINER_NAME

    echo "stopping $OLD_SITEAPP_CONTAINER_NAME..."
    docker stop $OLD_SITEAPP_CONTAINER_NAME

    echo "removing $OLD_SITEAPP_CONTAINER_NAME..."
    docker rm $OLD_SITEAPP_CONTAINER_NAME
fi

# ----- restart nginx -----

echo "restarting nginx inside $WEBSERVER_CONTAINER_NAME..."
docker exec $WEBSERVER_CONTAINER_NAME nginx -s reload

# ----- cleaning image -----

# echo "cleaning old image..."
# docker image rm $(docker images -q --filter dangling=true)

echo "deploy success..."
exit 0
